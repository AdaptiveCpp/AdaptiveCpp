name: Package AdaptiveCpp for Ubuntu
on: [push, pull_request]

jobs:
  packaging-acpp-cpu-backend:
    name: Packaging AdaptiveCpp, clang ${{matrix.clang}}, ${{matrix.os}}
    runs-on: ${{matrix.os}}
    container:
      image: ubuntu:jammy-20240212
    strategy:
      matrix:
        clang: ['16']
        os: [ubuntu-22.04]
    steps:
      - name: install git and other dependencies in container
        run: |
          apt update
          apt install -y git lsb-release software-properties-common wget curl gpg unzip g++-11
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: install LLVM
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          ./llvm.sh ${{matrix.clang}}
          apt install -y libclang-${{matrix.clang}}-dev clang-tools-${{matrix.clang}} libomp-${{matrix.clang}}-dev llvm-${{matrix.clang}}-dev liblld-${{matrix.clang}}-dev
          apt install -y libstdc++-12-dev
      - name: install dependencies
        run: |
          apt install -y libboost-all-dev libtbb-dev cmake python3
      - name: install OpenCL development files and loader
        run: |
          apt install -y libopencl-clang-dev ocl-icd-opencl-dev
      - name: setup build environment
        run: |
          export CXXFLAGS="$CXXFLAGS"
          if [[ "${{matrix.clang}}" != "11" && "${{matrix.clang}}" -lt "16" ]]; then
            export OMP_CXX_FLAGS="$CXXFLAGS -fexperimental-new-pass-manager"
            export CC=clang-${{matrix.clang}}
            export CXX=clang++-${{matrix.clang}}
          fi
          echo "CC=${CC}" >> $GITHUB_ENV
          echo "CXX=${CXX}" >> $GITHUB_ENV
          echo "OMP_CXX_FLAGS=${OMP_CXX_FLAGS}" >> $GITHUB_ENV
      - name: install packaging helpers
        run: |
          apt install -y build-essential devscripts debhelper
      - name: package AdaptiveCpp
        run: |
          cd ..
          cp -R AdaptiveCpp acpp-24.02.0
          tar -cf acpp_24.02.0.orig.tar.gz acpp-24.02.0/
          cd acpp-24.02.0/
          echo $(cat  /var/lib/dpkg/info/libllvm${{matrix.clang}}\:amd64.shlibs) > debian/shlibs.local
          debuild -us -uc
      - name: Install the package
        run: |
          cd ${GITHUB_WORKSPACE}/../
          dpkg -i acpp_24.02.0-1_amd64.deb
      - name: Release Packages
        uses: actions/upload-artifact@v4
        with:
          name: cpu-backend-generic
          path: /home/runner/work/AdaptiveCpp/acpp_24.02.0-1_amd64.deb
      - name: build generic SSCP tests
        if: matrix.clang >= 14
        run: |
          mkdir ${GITHUB_WORKSPACE}/build-tests-sscp
          cd ${GITHUB_WORKSPACE}/build-tests-sscp
          cmake -DACPP_TARGETS="generic" -DAdaptiveCpp_DIR=${GITHUB_WORKSPACE}/build/install/lib/cmake/AdaptiveCpp -DWITH_PSTL_TESTS=ON ${GITHUB_WORKSPACE}/tests
          make -j2
      - name: build CPU tests
        run: |
          mkdir ${GITHUB_WORKSPACE}/build-tests-cpu
          cd ${GITHUB_WORKSPACE}/build-tests-cpu
          cmake -DACPP_TARGETS="omp" -DAdaptiveCpp_DIR=/usr/lib/cmake/AdaptiveCpp ${GITHUB_WORKSPACE}/tests
          make -j2
      - name: run CPU tests
        run: |
          cd ${GITHUB_WORKSPACE}/build-tests-cpu
          LD_LIBRARY_PATH=/usr/lib ./sycl_tests
  packaging-acpp-all-backends:
    name: Packaging AdaptiveCpp, clang ${{matrix.clang}}, ${{matrix.os}}, CUDA ${{matrix.cuda}}, ROCm ${{matrix.rocm}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        clang: ['16']
        os: [ubuntu-22.04]
        cuda: [12.4.0]
        rocm: [5.6.1]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: install LLVM
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh ${{matrix.clang}}
          sudo apt install libclang-${{matrix.clang}}-dev clang-tools-${{matrix.clang}} libomp-${{matrix.clang}}-dev llvm-${{matrix.clang}}-dev liblld-${{matrix.clang}}-dev
          sudo apt install -y libstdc++-12-dev
      - name: install dependencies
        run: |
          sudo apt install cmake python3 libboost-all-dev libtbb-dev wget gpg curl
      - name: setup build environment
        run: |
          export CXXFLAGS="$CXXFLAGS"
          if [[ "${{matrix.clang}}" != "11" && "${{matrix.clang}}" -lt "16" ]]; then
            export OMP_CXX_FLAGS="$CXXFLAGS -fexperimental-new-pass-manager"
            export CC=clang-${{matrix.clang}}
            export CXX=clang++-${{matrix.clang}}
          fi
          echo "CC=${CC}" >> $GITHUB_ENV
          echo "CXX=${CXX}" >> $GITHUB_ENV
          echo "OMP_CXX_FLAGS=${OMP_CXX_FLAGS}" >> $GITHUB_ENV
      - name: install CUDA
        run : |
          mkdir -p /opt/AdaptiveCpp/cuda
          wget -q -O cuda.sh https://developer.download.nvidia.com/compute/cuda/12.4.0/local_installers/cuda_12.4.0_550.54.14_linux.run
          sudo sh cuda.sh --override --silent --toolkit --no-man-page --no-drm --no-opengl-libs --installpath=/opt/AdaptiveCpp/cuda || true
          echo "CUDA Version ${{matrix.cuda}}" | sudo tee /opt/AdaptiveCpp/cuda/version.txt
          rm cuda.sh
      - name: install ROCm
        run: |
          [[ ${{matrix.os}} == ubuntu-22.04 ]] && CODENAME=jammy
          sudo apt install libnuma-dev cmake unzip
          wget -q -O - https://repo.radeon.com/rocm/rocm.gpg.key | sudo apt-key add -
          echo "deb [arch=amd64] https://repo.radeon.com/rocm/apt/${{matrix.rocm}} $CODENAME main" | sudo tee /etc/apt/sources.list.d/rocm.list
          printf 'Package: *\nPin: release o=repo.radeon.com\nPin-Priority: 600' | sudo tee /etc/apt/preferences.d/rocm-pin-600
          sudo apt update
          sudo apt install rocm-dev
      - name: install OpenCL development files and loader
        run: |
          wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt update
          sudo apt install -y intel-oneapi-runtime-opencl-2024 intel-oneapi-runtime-compilers-2024 ocl-icd-libopencl1 ocl-icd-opencl-dev
      - name: install Level Zero
        run : |
          wget https://github.com/oneapi-src/level-zero/releases/download/v1.2.3/level-zero-devel_1.2.3+u18.04_amd64.deb
          wget https://github.com/oneapi-src/level-zero/releases/download/v1.2.3/level-zero_1.2.3+u18.04_amd64.deb
          sudo dpkg -i ./level-zero*
      - name: install packaging helpers
        run: |
          sudo  apt install build-essential
          sudo  apt install devscripts
          sudo  apt install debhelper
      - name: package AdaptiveCpp
        run: |
          cd ..
          cp -R AdaptiveCpp acpp-24.02.0
          tar -cf acpp_24.02.0.orig.tar.gz acpp-24.02.0/
          cd acpp-24.02.0/
          sed -i "s/-DWITH_CUDA_BACKEND=.*/-DWITH_CUDA_BACKEND=ON \\\/" debian/rules
          sed -i "s/-DWITH_ROCM_BACKEND=.*/-DWITH_ROCM_BACKEND=ON \\\/" debian/rules
          sed -i "s/-DWITH_LEVEL_ZERO_BACKEND=.*/-DWITH_LEVEL_ZERO_BACKEND=ON \\\/" debian/rules
          sed -i "s/-DWITH_OPENCL_BACKEND=.*/-DWITH_OPENCL_BACKEND=ON \\\/" debian/rules
          echo $(cat  /var/lib/dpkg/info/libllvm${{matrix.clang}}\:amd64.shlibs) > debian/shlibs.local
          echo "libhiprtc 5 hip-runtime-amd" >> debian/shlibs.local
          echo $(cat /var/lib/dpkg/info/ocl-icd-libopencl1\:amd64.shlibs) >> debian/shlibs.local
          echo "libcudart 12 cuda-cudart-12-4" >> debian/shlibs.local
          echo "libze_loader 1 level-zero" >> debian/shlibs.local
          echo "libamdhip64 5 hip-runtime-amd" >> debian/shlibs.local
          echo "libcuda 12 cuda-driver-dev-12-4" >> debian/shlibs.local
          debuild -us -uc
      - name: Install the package
        run: |
          cd ${GITHUB_WORKSPACE}/../
          sudo dpkg -i acpp_24.02.0-1_amd64.deb
      - name: Release Packages
        uses: actions/upload-artifact@v4
        with:
          name: all-backends
          path: /home/runner/work/AdaptiveCpp/acpp_24.02.0-1_amd64.deb
      - name: build generic SSCP tests
        if: matrix.clang >= 14
        run: |
          mkdir ${GITHUB_WORKSPACE}/build-tests-sscp
          cd ${GITHUB_WORKSPACE}/build-tests-sscp
          cmake -DACPP_TARGETS="generic" -DAdaptiveCpp_DIR=${GITHUB_WORKSPACE}/build/install/lib/cmake/AdaptiveCpp -DWITH_PSTL_TESTS=ON ${GITHUB_WORKSPACE}/tests
          make -j2
      - name: build CPU tests
        run: |
          mkdir ${GITHUB_WORKSPACE}/build-tests-cpu
          cd ${GITHUB_WORKSPACE}/build-tests-cpu
          cmake -DACPP_TARGETS="omp" -DAdaptiveCpp_DIR=${GITHUB_WORKSPACE}/build/install/lib/cmake/AdaptiveCpp ${GITHUB_WORKSPACE}/tests
          make -j2
      - name: build CUDA tests
        run: |
          mkdir ${GITHUB_WORKSPACE}/build-tests-cuda
          cd ${GITHUB_WORKSPACE}/build-tests-cuda
          cmake -DACPP_TARGETS="cuda:sm_60" -DAdaptiveCpp_DIR=${GITHUB_WORKSPACE}/build/install/lib/cmake/AdaptiveCpp ${GITHUB_WORKSPACE}/tests -DCMAKE_EXE_LINKER_FLAGS="-L/usr/lib/llvm-${{matrix.clang}}/lib"
          make -j2
      - name: build ROCm tests
        run: |
          mkdir ${GITHUB_WORKSPACE}/build-tests-rocm
          cd ${GITHUB_WORKSPACE}/build-tests-rocm
          cmake -DACPP_TARGETS="hip:gfx906" -DAdaptiveCpp_DIR=${GITHUB_WORKSPACE}/build/install/lib/cmake/AdaptiveCpp ${GITHUB_WORKSPACE}/tests -DCMAKE_EXE_LINKER_FLAGS="-L/usr/lib/llvm-${{matrix.clang}}/lib"
          make -j2
      - name: build explicit multipass tests
        run: |
          mkdir ${GITHUB_WORKSPACE}/build-tests-emp
          cd ${GITHUB_WORKSPACE}/build-tests-emp
          cmake -DACPP_TARGETS="omp;cuda.explicit-multipass:sm_60;hip:gfx906" -DAdaptiveCpp_DIR=${GITHUB_WORKSPACE}/build/install/lib/cmake/AdaptiveCpp ${GITHUB_WORKSPACE}/tests
          make -j2
