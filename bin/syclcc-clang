#!/usr/bin/env python3

'''
 *
 * This file is part of hipSYCL, a SYCL implementation based on CUDA/HIP
 *
 * Copyright (c) 2018,2019 Aksel Alpay
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 '''

import json
import os
import os.path
import sys
import subprocess
import string


class OptionNotSet(Exception):
  def __init__(self, msg):
    super().__init__(msg)

class config_file:
  def __init__(self, filepath):
    self._location = filepath
    try:
      with open(filepath, 'r') as config_file:
        self._data = json.load(config_file)
        self._is_loaded = True
    except:
      print("Could not open config",filepath)
      self._data = {}
      self._is_loaded = False

  @property
  def is_loaded(self):
    return self._is_loaded

  @property
  def location(self):
    return self._location

  def contains_key(self, key):
    if not key in self._data:
      return False
    if isinstance(self._data[key], str):
      if(self._data[key].endswith("-NOTFOUND") or
        self._data[key] == ""):
        return False
    return True

  def get(self, key):
    if not self.contains_key(key):
      raise RuntimeError("Accessed missing key in config file: "+key)

    return self._data[key]

  def get_or_default(self, key, default_value):
    if self.contains_key(key):
      return self._data[key]
    return default_value

class option:
  def __init__(self, commandline, environment, configfile, description):
    self._commandline = commandline
    self._environment = environment
    self._configfile = configfile
    self._description = description

  @property
  def commandline(self):
    return self._commandline

  @property
  def environment(self):
    return self._environment

  @property
  def configfile(self):
    return self._configfile

  @property
  def description(self):
    return self._description

class syclcc_config:
  def __init__(self, args):
    config_file_path = os.path.abspath(
      os.path.join(self.hipsycl_installation_path,
                  "etc/hipSYCL/syclcc.json"))
    
    self._config_file = None
    # First check silently if we can open the default config file.
    # If that fails, we try later on after argument parsing if a
    # custom location for the config file has been supplied.
    # (This happens when compiling hipSYCL)
    if os.path.exists(config_file_path):
      self._config_file = config_file(config_file_path)
      
    self._args = args

    # Describes different representations of options:
    # 1.) the corresponding command line argument
    # 2.) the corresponding environment variable
    # 3.) the field in the config file.
    self._options = {
      'platform': option("--hipsycl-platform", "HIPSYCL_PLATFORM", "default-platform",
"""  (deprecated) The platform that hipSYCL should target. Valid values:
    * cuda: Target NVIDIA CUDA GPUs
    * rocm: Target AMD GPUs running on the ROCm platform
    * cpu: Target only CPUs"""),

      'clang': option("--hipsycl-clang", "HIPSYCL_CLANG", "default-clang",
"""  The path to the clang executable that should be used for compilation
    (Note: *must* be compatible with the clang version that the 
     hipSYCL clang plugin was compiled against!)"""),

      'cuda-path': option("--hipsycl-cuda-path", "HIPSYCL_CUDA_PATH", "default-cuda-path",
"""  The path to the CUDA toolkit installation directry"""),

      'rocm-path': option("--hipsycl-rocm-path", "HIPSYCL_ROCM_PATH", "default-rocm-path",
"""  The path to the ROCm installation directory"""),

      'boost-path': option("--hipsycl-boost-path", "HIPSYCL_BOOST_PATH", "default-boost-path",
"""  The path to the boost installation directory"""),

      'gpu-arch': option("--hipsycl-gpu-arch", "HIPSYCL_GPU_ARCH", "default-gpu-arch",
"""  (deprecated) The GPU architecture that should be targeted when compiling for GPUs.
    For CUDA, the architecture has the form sm_XX, e.g. sm_60 for Pascal.
    For ROCm, the architecture has the form gfxYYY, e.g. gfx900 for Vega 10, gfx906 for Vega 20."""),

      'cpu-compiler': option("--hipsycl-cpu-cxx", "HIPSYCL_CPU_CXX", "default-cpu-cxx",
"""  The compiler that should be used when targeting only CPUs."""),
      
      'clang-include-path' : option("--hipsycl-clang-include-path", "HIPSYCL_CLANG_INCLUDE_PATH", "default-clang-include-path",
"""  The path to clang's internal include headers. Typically of the form $PREFIX/include/clang/<version>/include. Only required by ROCm."""),

      'rocm-link-line' : option("--hipsycl-rocm-link-line", "HIPSYCL_ROCM_LINK_LINE", "default-rocm-link-line",
""" The arguments passed to the compiler to link with ROCm libraries."""),
      
      'cuda-link-line' : option("--hipsycl-cuda-link-line", "HIPSYCL_CUDA_LINK_LINE", "default-cuda-link-line",
""" The arguments passed to the compiler to link with CUDA libraries."""),

      'config-file' : option("--hipsycl-config-file", "HIPSYCL_CONFIG_FILE", "default-config-file",
"""  Select an alternative path for the config file containing the default hipSYCL settings.
    It is normally not necessary for the user to change this setting. """),
    
      'targets': option("--hipsycl-targets", "HIPSYCL_TARGETS", "default-targets",
"""  Specify backends and targets to compile for. Example: --hipsycl-targets='omp;hip:gfx900,gfx906'
    Available backends:
      * omp - OpenMP CPU backend
      * cuda - CUDA backend 
               Requires specification of targets of the form sm_XY,
               e.g. sm_70 for Volta, sm_60 for Pascal
      * hip  - HIP backend
               Requires specification of targets of the form gfxXYZ,
               e.g. gfx906 for Vega 20, gfx900 for Vega 10""")
    }
    self._flags = {
      'is-dryrun': option("--hipsycl-dryrun", "HIPSYCL_DRYRUN", "default-is-dryrun",
"""  If set, only shows compilation commands that would be executed, 
  but does not actually execute it.""")
    }
    self._insufficient_cpp_standards = ['98', '03', '11', '14', '0x']
    self._hipsycl_args = []
    self._forwarded_args = []
    self._targets = None
    
    for arg in self._args:
      if self._is_hipsycl_arg(arg):
        self._hipsycl_args.append(arg)
      else:
        self._forwarded_args.append(arg)
        
    if self._is_option_set_to_non_default_value("config-file"):
      self._config_file = config_file(self._retrieve_option("config-file"))
      
    if self._config_file == None:
      # If the config file is still None at this point, probably no alternative
      # config file was supplied and the default one doesn't exist.
      # As a last resort, we check if there is a global config file
      # TODO try using some more portable path here
      global_config_file = '/etc/hipSYCL/syclcc.json'
      if os.path.exists(global_config_file):
        self._config_file = config_file(global_config_file)
      else:
        # The main purpose of opening the default config file explicitly 
        # here is that it will print a warning for the user
        # if it doesn't exist and set the config file content to {}.
        self._config_file = config_file(config_file_path)
    
    self._common_compiler_args = self._get_std_compiler_args()

  def _is_hipsycl_arg(self, arg):
    accepted_args = [self._options[opt].commandline for opt in self._options]
    accepted_args += [self._flags[flag].commandline for flag in self._flags]
    for accepted_arg in accepted_args:
      if arg.startswith(accepted_arg + "=") or arg == accepted_arg:
        return True
    return False

  def _parse_compound_argument(self, arg):
    parsed_args = arg.split("=")
    if len(parsed_args) != 2:
      raise RuntimeError("Invalid argument: "+arg)
    return parsed_args[1]

  def print_options(self):
    for option_name in self._options:
      opt = self._options[option_name]
      print(opt.commandline + "=<value>")
      print("  [can also be set with environment variable: {}=<value>]".format(opt.environment))
      print("  [default value provided by field '{}' in {}.]".format(opt.configfile, self._config_file.location))
      try:
        print("  [current value: {}]".format(self._retrieve_option(option_name)))
      except OptionNotSet:
        print("  [current value: NOT SET]")
      print(opt.description)
      print("")

  def print_flags(self):
    for flag_name in self._flags:
      flag = self._flags[flag_name]
      print(flag.commandline)
      print("  [can also be set by setting environment variable {} to any value other than false|off|0 ]".format(
        flag.environment
      ))
      print("  [default value provided by field '{}' in {}.]".format(flag.configfile, self._config_file.location))
      try:
        print("  [current value: {}]".format(self._is_flag_set(flag_name)))
      except OptionNotSet:
        print("  [current value: NOT SET]")
      print(flag.description)
      print("")

  def _interpret_flag(self, flag_value):
    v = flag_value.lower()
    if (v == "0" or v == "off" or
        v == "false"):
      return False
    return True

  def _is_flag_set(self, flag_name):
    flag = self._flags[flag_name]
    if flag.commandline in self._hipsycl_args:
      return True

    if flag.environment in os.environ:
      env_value = os.environ[flag.environment]
      return self._interpret_flag(env_value)

    if self._config_file.contains_key(flag.configfile):
      return self._interpret_flag(self._config_file.get(flag.configfile))

    raise OptionNotSet(
      "Could not infer value of required flag from command line argument {}, "
      "environment variable {} or config file.".format(
        flag.commandline, flag.environment
    ))

  def _get_rocm_substitution_vars(self):
    return {
      'HIPSYCL_ROCM_PATH' : self.rocm_path,
      'HIPSYCL_ROCM_LIB_PATH' : os.path.join(self.rocm_path, "lib"),
      'HIPSYCL_PATH' : self.hipsycl_installation_path,
      'HIPSYCL_LIB_PATH' : os.path.join(self.hipsycl_installation_path, "lib")
    }

  def _get_cuda_substitution_vars(self):
    return {
      'HIPSYCL_CUDA_PATH' : self.cuda_path,
      'HIPSYCL_CUDA_LIB_PATH' : os.path.join(self.cuda_path, "lib64"),
      'HIPSYCL_PATH' : self.hipsycl_installation_path,
      'HIPSYCL_LIB_PATH' : os.path.join(self.hipsycl_installation_path, "lib")
    }

  def _substitute_template_string(self, template_string, substitution_dict):
    template = string.Template(template_string)
    return template.substitute(substitution_dict)

  def _substitute_rocm_template_string(self, template_string):
    return self._substitute_template_string(
      template_string, self._get_rocm_substitution_vars())
      
  def _substitute_cuda_template_string(self, template_string):
    return self._substitute_template_string(
      template_string, self._get_cuda_substitution_vars())

  def _is_option_set_to_non_default_value(self, option_name):
    opt = self._options[option_name]
    
    for arg in self._hipsycl_args:
      if arg.startswith(opt.commandline+"="):
        return True
      
    if opt.environment in os.environ:
      return True
    
    return False

  def _retrieve_option(self, option_name):
    opt = self._options[option_name]

    # Try commandline first
    for arg in self._hipsycl_args:
      if arg.startswith(opt.commandline+"="):
        return self._parse_compound_argument(arg)

    # Try environment variables
    if opt.environment in os.environ:
      return os.environ[opt.environment]

    # Try config file
    if self._config_file.contains_key(opt.configfile):
      return self._config_file.get(opt.configfile)

    raise OptionNotSet("Required command line argument {} or environment variable {} not specified".format(
            opt.commandline, opt.environment))

  # Make sure that at least c++17 is added to the common args
  def _get_std_compiler_args(self):
    std_args=[]
    for arg in self._args:
      split_arg = arg.split("=")
      if split_arg[0]=="-std":
        std_args.append(split_arg[1])
    if not std_args:
       return ["-std=c++17"]
    else:
        if len(std_args) > 1:
            raise RuntimeError("Multiple c++ standards defined")
        std_version = std_args[0].strip("c++").strip("gnu++")
        if std_version in self._insufficient_cpp_standards:
            raise RuntimeError("Insufficient c++ standard '{}'".format(std_args[0]))
        return []

  def _parse_targets(self, target_arg):
    # Split backends by ;
    platform_substrings = target_arg.replace("'","").replace('"',"").split(';')
    
    result = {}
    for p in platform_substrings:
      platform_target_separated = p.split(':', 1)
      if len(platform_target_separated) > 2 or len(platform_target_separated) == 0:
        raise RuntimeError("Invalid target description: " + p)
      
      platform = platform_target_separated[0].strip().lower()

      if not platform in result:
        result[platform] = []

      if len(platform_target_separated) > 1:
        targets = [t.strip().lower() for t in platform_target_separated[1].split(",")]
        for t in targets:
          if not t in result[platform]:
            result[platform].append(t)

    return result
  
  @property
  def targets(self):
    
    if self._targets == None:
      raw_target_string = ""
      try:
        raw_target_string = self._retrieve_option("targets")
      except OptionNotSet:
        # Legacy compatibility args
        try:
          platform = self._retrieve_option("platform")

          hip_platform_synonyms      = set(["rocm", "amd", "hip"])
          cuda_platform_synonyms     = set(["nvidia", "cuda"])
          pure_cpu_platform_synonyms = set(["host", "cpu", "hipcpu", "omp"])


          if platform in hip_platform_synonyms:
            target_arch = self._retrieve_option("gpu-arch")
            raw_target_string = "hip:" + target_arch
            
          elif platform in cuda_platform_synonyms:
            target_arch = self._retrieve_option("gpu-arch")
            raw_target_string = "cuda:" + target_arch
            
          elif platform in pure_cpu_platform_synonyms:
            raw_target_string = "omp"
        except OptionNotSet:
          raise OptionNotSet("Neither a --hipsycl-targets specification "
                             "nor the legacy combination of --hipsycl-platform and "
                             "--hipsycl-gpu-arch was provided")

      self._targets = self._parse_targets(raw_target_string)

    return self._targets

  @property
  def cuda_path(self):
    return self._retrieve_option("cuda-path")

  @property
  def rocm_path(self):
    return self._retrieve_option("rocm-path")

  @property
  def boost_path(self):
    return self._retrieve_option("boost-path")

  @property
  def clang_path(self):
    return self._retrieve_option("clang")

  @property
  def pure_cpu_compiler(self):
    return self._retrieve_option("cpu-compiler")

  @property
  def clang_include_path(self):
    return self._retrieve_option("clang-include-path")

  @property
  def hipsycl_installation_path(self):
    syclcc_path = os.path.dirname(os.path.realpath(__file__))
    return os.path.join(syclcc_path, "..")

  @property
  def rocm_link_line(self):
    components = self._retrieve_option("rocm-link-line").split(' ')
    return [self._substitute_rocm_template_string(arg) for arg in components]
  
  @property
  def cuda_link_line(self):
    components = self._retrieve_option("cuda-link-line").split(' ')
    return [self._substitute_cuda_template_string(arg) for arg in components]

  @property
  def forwarded_compiler_arguments(self):
    return self._forwarded_args

  @property
  def is_dryrun(self):
    try:
      return self._is_flag_set("is-dryrun")
    except OptionNotSet:
      return False
  
  @property
  def common_compiler_args(self):
    return self._common_compiler_args
  
  def has_optimization_flag(self):
    for arg in self._forwarded_args:
      if arg.startswith("-O"):
        ending = arg.replace("-O", "", 1)
        if ending.isnumeric() or ending in ["s", "fast", "g"]:
          return True
    return False
  
  def contains_linking_stage(self):
    for arg in self.forwarded_compiler_arguments:
      if (arg == "-E" or
          arg == "-fsyntax-only" or
          arg == "-S" or
          arg == "-c"):
        return False
    return True

  def is_pure_linking_stage(self):
    source_file_endings = set([".cpp",".cxx",".c++",".cc",".c", ".hip", ".cu"])
    for arg in self.forwarded_compiler_arguments:
      if not arg.startswith("-"):
        for ending in source_file_endings:
          if arg.lower().endswith(ending):
            return False
    return True

def run_or_print(command, print_only):
  if not print_only:
    return subprocess.call(command)
  else:
    print(' '.join(command))
    return 0


class cuda_invocation:
  def __init__(self, config):
    if not "cuda" in config.targets:
      raise RuntimeError("CUDA not among targets")
    if len(config.targets["cuda"]) == 0:
      raise OptionNotSet("No CUDA targets specified")

    self._cuda_targets = config.targets["cuda"]
    self._cuda_path = config.cuda_path
    self._clang = config.clang_path
    self._linker_args = config.cuda_link_line
    self._hipsycl_lib_path = os.path.join(config.hipsycl_installation_path, "lib/")

  def get_compiler_preference(self):
    return (self._clang, 100)

  def get_cxx_flags(self):

    flags = [
        "-x", "cuda",
        "--cuda-path=" + self._cuda_path,
        "-D__HIPSYCL_ENABLE_CUDA_TARGET__",
        "-D__HIPSYCL_CLANG__",
        # clang erroneously sets feature detection flags for 
        # __float128 even though it is not supported for CUDA / HIP,
        # see https://bugs.llvm.org/show_bug.cgi?id=47559.
        "-U__FLOAT128__", "-U__SIZEOF_FLOAT128__",
        "-fplugin=" + os.path.join(self._hipsycl_lib_path, "libhipSYCL_clang.so")
      ]

    for t in self._cuda_targets:
      flags += ["--cuda-gpu-arch=" + t]
      
    return flags

  def get_linker_flags(self):
    return self._linker_args


class hip_invocation:
  def __init__(self, config):
    if not "hip" in config.targets:
      raise RuntimeError("HIP not among targets")
    if len(config.targets["hip"]) == 0:
      raise OptionNotSet("No HIP targets specified")

    self._hip_targets = config.targets["hip"]
    self._rocm_path = config.rocm_path
    self._clang = config.clang_path
    self._linker_args = config.rocm_link_line
    self._clang_include_path = config.clang_include_path
    self._hipsycl_lib_path = os.path.join(config.hipsycl_installation_path, "lib/")

  def get_compiler_preference(self):
    return (self._clang, 100)

  def get_cxx_flags(self):

    flags = [
        "-x", "hip",
        "--hip-device-lib-path=" + os.path.join(self._rocm_path, "lib"),
        "-D__HIPSYCL_ENABLE_HIP_TARGET__",
        "-D__HIPSYCL_CLANG__",
        # clang erroneously sets feature detection flags for 
        # __float128 even though it is not supported for CUDA / HIP,
        # see https://bugs.llvm.org/show_bug.cgi?id=47559.
        "-U__FLOAT128__", "-U__SIZEOF_FLOAT128__",
        "-I" + os.path.join(self._rocm_path, "include"),
        # This here is necessary because some distributions of clang
        # incorrectly have the gcc/system headers *before* clangs own
        # include path. This causes "file not found" errors when the
        # clang CUDA wrapper headers try to include the system headers
        # with #include_next <...>
        "-isystem", self._clang_include_path,
        "-fplugin=" + os.path.join(self._hipsycl_lib_path, "libhipSYCL_clang.so")
      ]

    for t in self._hip_targets:
      flags += ["--cuda-gpu-arch=" + t]
      
    return flags

  def get_linker_flags(self):
    return self._linker_args

class omp_invocation:
  def __init__(self, config):
    if not "omp" in config.targets:
      raise RuntimeError("OpenMP not among targets")
    if len(config.targets["omp"]) != 0:
      raise RuntimeError("OpenMP backend does not support specifiying target architecture")

    self._cxx = config.pure_cpu_compiler
    self._boost = config.boost_path

  def get_compiler_preference(self):
    return (self._cxx, 1)

  def get_cxx_flags(self):

    flags = [
        "-D__HIPSYCL_ENABLE_OMPHOST_TARGET__",
      ]
    # if not specified we use the system boost
    if self._boost != "":
        flags += ["-I" + os.path.join(self._boost, "include")]

    if sys.platform == "darwin":
        # y'all still need libomp installed
        flags += ["-Xclang"]
    flags += ["-fopenmp"]
      
    return flags

  def get_linker_flags(self):
    linker_args = [
      "-lboost_context",
      "-lboost_fiber"
    ]

    if self._boost != "":
        linker_args += [
                "-L" + os.path.join(self._boost, "lib"),
                "-Wl,-rpath=" + os.path.join(self._boost, "lib")
                ]

    if sys.platform == "darwin":
        # y'all still need libomp installed
        linker_args += ["-Xclang"]
    linker_args += ["-fopenmp"]

    return linker_args

# This is a workaround to have access to a backend
# that can execute host tasks when compiling for GPUs.
# It should be removed once we have non-OpenMP host backends
# (e.g. TBB)
class omp_sequential_invocation:
  def __init__(self, config):
    self._cxx = config.pure_cpu_compiler
    self._boost = config.boost_path

  def get_compiler_preference(self):
    return (self._cxx, 1)

  def get_cxx_flags(self):

    flags = [
        "-D__HIPSYCL_ENABLE_OMPHOST_TARGET__",
      ]
      
    if self._boost != "":
        flags += ["-I" + os.path.join(self._boost, "include")]

    return flags

  def get_linker_flags(self):
    linker_args = [
      "-lboost_context",
      "-lboost_fiber",
      "-lomp"
    ]

    if self._boost != "":
        linker_args += [
                "-L" + os.path.join(self._boost, "lib"),
                "-Wl,-rpath=" + os.path.join(self._boost, "lib")
                ]
    return linker_args

class compiler:
  def __init__(self, config):
    self._user_args = config.forwarded_compiler_arguments
    self._requires_linking = config.contains_linking_stage()
    self._requires_compilation = not config.is_pure_linking_stage()
    self._is_dry_run = config.is_dryrun
    self._targets = config.targets
    self._common_compiler_args = config.common_compiler_args
    self._hipsycl_path = config.hipsycl_installation_path
    self._hipsycl_lib_path = os.path.join(self._hipsycl_path, "lib/")

    if "hip" in self._targets and "cuda" in self._targets:
      raise RuntimeError("CUDA and HIP cannot be targeted simultaneously")
    # clang bug prevents clang -x cuda -fopenmp from working
    if "omp" in self._targets and "cuda" in self._targets:
      raise RuntimeError("CUDA and OpenMP cannot be targeted simultaneously")

    self._backends = []

    for backend in self._targets:
      if backend == "omp":
        self._backends.append(omp_invocation(config))
      elif backend == "cuda":
        self._backends.append(cuda_invocation(config))
      elif backend == "hip":
        self._backends.append(hip_invocation(config))
      else:
        raise RuntimeError("Unknown backend: " + backend)
      
    
    if not "omp" in self._targets:
      # We need at least OpenMP "lite" (i.e. without -fopenmp) to
      # get access to things like host tasks
     self._backends.append(omp_sequential_invocation(config))

  @property
  def common_cxx_flags(self):
    args = [
      "-I" + os.path.join(self._hipsycl_path, "include/"),
      "-D__HIPSYCL__"
    ] + self._common_compiler_args

    return args

  @property
  def common_linker_flags(self):
    linker_args = [
      "-Wl,-rpath="+self._hipsycl_lib_path,
      "-L"+self._hipsycl_lib_path,
      "-lhipSYCL-rt"
    ]

    return linker_args

  def run(self):
    cxx_flags = self.common_cxx_flags
    ld_flags = self.common_linker_flags
    compiler_executable, compiler_priority = ("", 0)

    for backend_args in self._backends:
      cxx, priority = backend_args.get_compiler_preference()
      if priority > compiler_priority:
        compiler_executable = cxx
        compiler_priority = priority

      cxx_flags += backend_args.get_cxx_flags()
      ld_flags += backend_args.get_linker_flags()

    args = []
    if self._requires_compilation:
      args += cxx_flags
    if self._requires_linking:
      args += ld_flags

    args += self._user_args

    return run_or_print([compiler_executable] + args,
                        self._is_dry_run)

def print_usage(config):
  print("syclcc [hipSYCL compilation driver], Copyright (C) 2018-2020 Aksel Alpay")
  print("Usage: syclcc <options>\n")
  print("Options are:")
  config.print_options()
  config.print_flags()
  print("\nAny other options will be forwarded to the compiler.")
  print("\nNote: Command line arguments take precedence over environment variables.")

if __name__ == '__main__':
  if sys.version_info[0] < 3:
    print("syclcc requires python 3.")
    sys.exit(-1)
  
  args = sys.argv[1:]

  try:
    config = syclcc_config(args)

    if len(args) == 0:
      print_usage(config)
      sys.exit(-1)

    for arg in args:
      if arg == "--help":
        print_usage(config)
        sys.exit(0)

    if not config.is_pure_linking_stage():
      if not config.has_optimization_flag():
        print("syclcc warning: No optimization flag was given, optimizations are "
              "disabled by default. Performance may be degraded. Compile with e.g. -O2/-O3 to "
              "enable optimizations.")
    
    c = compiler(config)
    sys.exit(c.run())
  except Exception as e:
    print("syclcc fatal error: "+str(e))
    sys.exit(-1)
