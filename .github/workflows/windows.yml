name: Windows build and test

on: [push, pull_request]

jobs:
  test:
    name: clang ${{ matrix.clang_version }}, CUDA ${{matrix.cuda}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        clang_version: [15.0.0]
        os: [windows-2019]
        cuda: ['10.2', '11.8', '12.1']
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Cache Boost
      id: cache-boost
      uses: actions/cache@v3
      with:
        path: ${{github.workspace}}/boost/boost_1_81_0
        key: ${{runner.os}}-boost

    - name: Cache LLVM
      id: cache-llvm
      uses: actions/cache@v3
      with:
        path: ${{github.workspace}}/llvm
        key: ${{runner.os}}-llvm15

    - name: Cache CUDA 10.2
      if: matrix.cuda == 10.2
      id: cache-cuda-10-2
      uses: actions/cache@v3
      with:
        path: "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA"
        key: ${{runner.os}}-cuda-10-2

    - name: Cache CUDA 11.8
      if: matrix.cuda == 11.8
      id: cache-cuda-11-8
      uses: actions/cache@v3
      with:
        path: "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA"
        key: ${{runner.os}}-cuda-11-8

    - name: Cache CUDA 12.1
      if: matrix.cuda == 12.1
      id: cache-cuda-12-1
      uses: actions/cache@v3
      with:
        path: "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA"
        key: ${{runner.os}}-cuda-12-1

    - name: Add Ninja to PATH
      shell: powershell
      run: |
        echo "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\Ninja" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
    - name: Download prebuilt LLVM
      if: steps.cache-llvm.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        cd $env:GITHUB_WORKSPACE
        Invoke-WebRequest -o llvm.7z https://www.dropbox.com/s/o8eth32n9ajzw0l/llvm-15-windows-prebuilt.7z?dl=1
        7z.exe x llvm.7z
        
    - name: Build boost from source
      if: steps.cache-boost.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        $env:PATH += ";$env:GITHUB_WORKSPACE/llvm/bin"
        md -Force $env:GITHUB_WORKSPACE/boost
        cd $env:GITHUB_WORKSPACE/boost
        Invoke-WebRequest https://boostorg.jfrog.io/artifactory/main/release/1.81.0/source/boost_1_81_0.7z -OutFile boost.7z
        7z.exe x boost.7z
        ls $env:GITHUB_WORKSPACE
        cd .\boost_1_81_0
        .\bootstrap.bat
        .\b2.exe --with-context --with-fiber --with-test toolset=clang-win address-model=64 variant=release --build-type=complete stage

    - name: install CUDA 10.2
      if: matrix.cuda == 10.2 && steps.cache-cuda-10-2.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        Invoke-WebRequest -O cuda.exe https://developer.download.nvidia.com/compute/cuda/10.2/Prod/network_installers/cuda_10.2.89_win10_network.exe
        Start-Process -FilePath "cuda.exe" -ArgumentList "-s nvcc_10.2 nvprune_10.2 cupti_10.2 cublas_10.2 cublas_dev_10.2 cudart_10.2 cufft_10.2 cufft_dev_10.2 curand_10.2 curand_dev_10.2 cusolver_10.2 cusolver_dev_10.2 cusparse_10.2 cusparse_dev_10.2 npp_10.2 npp_dev_10.2 nvrtc_10.2 nvrtc_dev_10.2 nvml_dev_10.2" -Wait -NoNewWindow
        
    - name: install CUDA 11.8
      if: matrix.cuda == 11.8 && steps.cache-cuda-11-8.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        Invoke-WebRequest -O cuda.exe https://developer.download.nvidia.com/compute/cuda/11.8.0/network_installers/cuda_11.8.0_windows_network.exe
        Start-Process -FilePath "cuda.exe" -ArgumentList "-s nvcc_11.8 nvprune_11.8 cupti_11.8 cublas_11.8 cublas_dev_11.8 cudart_11.8 cufft_11.8 cufft_dev_11.8 curand_11.8 curand_dev_11.8 cusolver_11.8 cusolver_dev_11.8 cusparse_11.8 cusparse_dev_11.8 npp_11.8 npp_dev_11.8 nvrtc_11.8 nvrtc_dev_11.8 nvml_dev_11.8" -Wait -NoNewWindow

    - name: install CUDA 12.1
      if: matrix.cuda == 12.1 && steps.cache-cuda-12-1.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        Invoke-WebRequest -O cuda.exe https://developer.download.nvidia.com/compute/cuda/12.1.0/network_installers/cuda_12.1.0_windows_network.exe
        Start-Process -FilePath "cuda.exe" -ArgumentList "-s nvcc_12.1 nvprune_12.1 cupti_12.1 cublas_12.1 cublas_dev_12.1 cudart_12.1 cufft_12.1 cufft_dev_12.1 curand_12.1 curand_dev_12.1 cusolver_12.1 cusolver_dev_12.1 cusparse_12.1 cusparse_dev_12.1 npp_12.1 npp_dev_12.1 nvrtc_12.1 nvrtc_dev_12.1 nvml_dev_12.1" -Wait -NoNewWindow
        
    - name: Build OpenSYCL
      shell: powershell
      env:
        CUDA_PATH: "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v${{matrix.cuda}}"
        CUDA_BIN_PATH: "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v${{matrix.cuda}}/bin"
      run: |
        $env:PATH = "$env:GITHUB_WORKSPACE/llvm/bin;$env:PATH"
        mkdir $env:GITHUB_WORKSPACE/build/core
        cd $env:GITHUB_WORKSPACE/build/core
        cmake "$env:GITHUB_WORKSPACE" -G Ninja -DCMAKE_C_COMPILER="clang.exe" -DCMAKE_CXX_COMPILER="clang++.exe" -DCMAKE_INSTALL_PREFIX=".\install" -DBOOST_ROOT="$env:GITHUB_WORKSPACE/boost/boost_1_81_0" -DWITH_CUDA_BACKEND=ON -DLLVM_DIR="$env:GITHUB_WORKSPACE/llvm/lib/cmake/llvm" -DCMAKE_BUILD_TYPE=Release
        ninja -j2 install

    - name: build CPU tests
      shell: powershell
      run: |
        $env:PATH = "$env:GITHUB_WORKSPACE/llvm/bin;$env:PATH"
        mkdir $env:GITHUB_WORKSPACE/build/tests-cpu
        cd $env:GITHUB_WORKSPACE/build/tests-cpu
        cmake -G Ninja -DHIPSYCL_TARGETS="omp" -DhipSYCL_DIR="$env:GITHUB_WORKSPACE/build/core/install/lib/cmake/hipSYCL" -DBOOST_ROOT="$env:GITHUB_WORKSPACE/boost/boost_1_81_0" -DCMAKE_BUILD_TYPE=Release "$env:GITHUB_WORKSPACE/tests"
        ninja -j2

    - name: run CPU tests
      shell: cmd
      run: |
        set PATH=%GITHUB_WORKSPACE%\build\core\install\bin;%PATH%
        set GITHUB_WORKSPACE=%GITHUB_WORKSPACE:\=/%
        cd "%GITHUB_WORKSPACE%/build/tests-cpu"
        sycl_tests.exe
        
