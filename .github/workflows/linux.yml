name: Linux build and test

on: [push, pull_request]

jobs:
  test-clang-based:
    name: clang ${{ matrix.clang_version }}, ${{ matrix.os }}, CUDA ${{matrix.cuda}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        clang_version: [11, 12, 13, 14, 15, 16]
        rocm_version: ['4.0.1']
        os: [ubuntu-20.04, ubuntu-18.04]
        cuda: [11.0]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: install Level Zero
      run : |
        wget https://github.com/oneapi-src/level-zero/releases/download/v1.2.3/level-zero-devel_1.2.3+u18.04_amd64.deb
        wget https://github.com/oneapi-src/level-zero/releases/download/v1.2.3/level-zero_1.2.3+u18.04_amd64.deb
        sudo dpkg -i ./level-zero*
    - name: install CUDA 10.0
      if: matrix.cuda == 10.0
      run: |
        mkdir -p /opt/OpenSYCL/cuda
        wget -q -O cuda.sh https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux
        sudo sh ./cuda.sh --override --silent --toolkit --toolkitpath /opt/OpenSYCL/cuda
    - name: install CUDA 10.2
      if: matrix.cuda == 10.2
      run: |
        mkdir -p /opt/OpenSYCL/cuda
        wget -q -O cuda.sh https://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run
        sudo sh ./cuda.sh --override --silent --toolkit --no-man-page --no-drm --no-opengl-libs --installpath=/opt/OpenSYCL/cuda
    - name: install CUDA 11.0
      if: matrix.cuda == 11.0
      run: |
        mkdir -p /opt/OpenSYCL/cuda
        wget -q -O cuda.sh http://developer.download.nvidia.com/compute/cuda/11.0.2/local_installers/cuda_11.0.2_450.51.05_linux.run
        sudo sh ./cuda.sh --override --silent --toolkit --no-man-page --no-drm --no-opengl-libs --installpath=/opt/OpenSYCL/cuda || true
        echo "CUDA Version 11.0.0" | sudo tee /opt/OpenSYCL/cuda/version.txt
    - name: install ROCm
      run: |
        sudo apt install libnuma-dev cmake unzip
        wget -q -O - https://repo.radeon.com/rocm/rocm.gpg.key | sudo apt-key add -
        echo 'deb [arch=amd64] https://repo.radeon.com/rocm/apt/${{matrix.rocm_version}} xenial main' | sudo tee /etc/apt/sources.list.d/rocm.list
        sudo apt update
        sudo apt install rocm-dev
    - name: install LLVM
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh ${{matrix.clang_version}}
        sudo apt install libclang-${{matrix.clang_version}}-dev clang-tools-${{matrix.clang_version}} libomp-${{matrix.clang_version}}-dev
        if [[ "${{matrix.clang_version}}" == "16" ]]; then
          sudo rm -r /usr/lib/clang/16*
          sudo ln -s /usr/lib/llvm-16/lib/clang/16 /usr/lib/clang/16
        fi
    - name: install boost (from source)
      if: matrix.os == 'ubuntu-18.04'
      run: |
        wget -q https://boostorg.jfrog.io/artifactory/main/release/1.70.0/source/boost_1_70_0.zip
        unzip boost_1_70_0.zip
        cd boost_1_70_0
        ./bootstrap.sh --prefix=/usr
        sudo ./b2 link=static,shared install -j$(nproc) || true
        cd ..
    - name: install boost (from apt)
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt install libboost-all-dev
    - name: build Open SYCL
      run: |
        mkdir build && cd build
        cmake -DCMAKE_CXX_COMPILER=/usr/bin/clang++-${{matrix.clang_version}} -DCLANG_EXECUTABLE_PATH=/usr/bin/clang++-${{matrix.clang_version}} -DLLVM_DIR=/usr/lib/llvm-${{matrix.clang_version}}/cmake -DWITH_CUDA_BACKEND=ON -DWITH_ROCM_BACKEND=ON -DWITH_LEVEL_ZERO_BACKEND=ON -DCMAKE_INSTALL_PREFIX=`pwd`/install -DCUDA_TOOLKIT_ROOT_DIR=/opt/OpenSYCL/cuda -DROCM_PATH=/opt/rocm ..
        make -j2 install
        cp /opt/OpenSYCL/cuda/lib64/stubs/libcuda.so `pwd`/install/lib/libcuda.so
        cp /opt/OpenSYCL/cuda/lib64/stubs/libcuda.so `pwd`/install/lib/libcuda.so.1
    - name: build CPU tests
      run: |
        mkdir /home/runner/work/OpenSYCL/OpenSYCL/build/tests-cpu
        cd /home/runner/work/OpenSYCL/OpenSYCL/build/tests-cpu
        cmake -DOPENSYCL_TARGETS="omp" -DOpenSYCL_DIR=/home/runner/work/OpenSYCL/OpenSYCL/build/install/lib/cmake/OpenSYCL /home/runner/work/OpenSYCL/OpenSYCL/tests
        make -j2
    - name: build generic SSCP tests
      if: matrix.clang_version >= 14
      run: |
        mkdir /home/runner/work/OpenSYCL/OpenSYCL/build/tests-sscp
        cd /home/runner/work/OpenSYCL/OpenSYCL/build/tests-sscp
        cmake -DOPENSYCL_TARGETS="generic" -DOpenSYCL_DIR=/home/runner/work/OpenSYCL/OpenSYCL/build/install/lib/cmake/OpenSYCL /home/runner/work/OpenSYCL/OpenSYCL/tests
        make -j2
    - name: build CUDA tests
      run: |
        mkdir /home/runner/work/OpenSYCL/OpenSYCL/build/tests-cuda
        cd /home/runner/work/OpenSYCL/OpenSYCL/build/tests-cuda
        cmake -DOPENSYCL_TARGETS="cuda:sm_60" -DOpenSYCL_DIR=/home/runner/work/OpenSYCL/OpenSYCL/build/install/lib/cmake/OpenSYCL /home/runner/work/OpenSYCL/OpenSYCL/tests -DCMAKE_EXE_LINKER_FLAGS="-L/usr/lib/llvm-${{matrix.clang_version}}/lib"
        make -j2
    - name: build ROCm tests
      run: |
        mkdir /home/runner/work/OpenSYCL/OpenSYCL/build/tests-rocm
        cd /home/runner/work/OpenSYCL/OpenSYCL/build/tests-rocm
        cmake -DOPENSYCL_TARGETS="hip:gfx906" -DOpenSYCL_DIR=/home/runner/work/OpenSYCL/OpenSYCL/build/install/lib/cmake/OpenSYCL /home/runner/work/OpenSYCL/OpenSYCL/tests -DCMAKE_EXE_LINKER_FLAGS="-L/usr/lib/llvm-${{matrix.clang_version}}/lib"
        make -j2
    - name: build explicit multipass tests
      run: |
        mkdir /home/runner/work/OpenSYCL/OpenSYCL/build/tests-emp
        cd /home/runner/work/OpenSYCL/OpenSYCL/build/tests-emp
        cmake -DOPENSYCL_TARGETS="omp;cuda.explicit-multipass:sm_60;hip:gfx906" -DOpenSYCL_DIR=/home/runner/work/OpenSYCL/OpenSYCL/build/install/lib/cmake/OpenSYCL /home/runner/work/OpenSYCL/OpenSYCL/tests
        make -j2
    - name: run CPU tests
      run: |
        cd /home/runner/work/OpenSYCL/OpenSYCL/build/tests-cpu
        LD_LIBRARY_PATH=/home/runner/work/OpenSYCL/OpenSYCL/build/install/lib ./sycl_tests
  test-nvcxx-based:
    name: nvcxx, ${{matrix.os}}, CUDA ${{matrix.cuda_version}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        cuda_version: ['11.5']
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: install dependencies
      run : |
        sudo apt update
        sudo apt install cmake libboost-all-dev wget
    - name: install nvcxx
      run: |
        wget https://developer.download.nvidia.com/hpc-sdk/22.1/nvhpc-22-1_22.1_amd64.deb
        wget https://developer.download.nvidia.com/hpc-sdk/22.1/nvhpc-2022_22.1_amd64.deb
        sudo apt install ./nvhpc-*
    - name: build Open SYCL
      run: |
        mkdir build && cd build
        export NV_HPC_SDK_ROOT=/opt/nvidia/hpc_sdk/Linux_x86_64/22.1
        export NV_HPC_CUDA_ROOT=${NV_HPC_SDK_ROOT}/cuda/${{matrix.cuda_version}}
        cmake -DNVCXX_COMPILER=${NV_HPC_SDK_ROOT}/compilers/bin/nvc++ -DWITH_CUDA_BACKEND=ON -DWITH_CUDA_NVCXX_ONLY=ON -DCMAKE_INSTALL_PREFIX=`pwd`/install -DCUDA_TOOLKIT_ROOT_DIR=${NV_HPC_CUDA_ROOT} ..
        make -j2 install
        cp ${NV_HPC_CUDA_ROOT}/lib64/stubs/libcuda.so `pwd`/install/lib/libcuda.so
        cp ${NV_HPC_CUDA_ROOT}/lib64/stubs/libcuda.so `pwd`/install/lib/libcuda.so.1
    - name: build tests
      run: |
        mkdir /home/runner/work/OpenSYCL/OpenSYCL/build/tests-nvcxx
        cmake -DOPENSYCL_TARGETS="cuda-nvcxx" -DCMAKE_BUILD_TYPE=Debug -DOpenSYCL_DIR=/home/runner/work/OpenSYCL/OpenSYCL/build/install/lib/cmake/OpenSYCL /home/runner/work/OpenSYCL/OpenSYCL/tests
        make -j2
